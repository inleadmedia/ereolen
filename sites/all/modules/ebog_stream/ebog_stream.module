<?php
/**
 * @file
 *
 * Streaming reader backend and loaning logic here.
 */

define('EREOLEN_KEY', '48BD7B7E-BF4A-47A7-A369-59A6375D8B58');

/**
 * Implementation of hook_menu.
 */
function ebog_stream_menu() {
  $items = array();

  $items['publizon/%/stream'] = array(
    'page callback' => 'ebog_stream_stream',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['publizon/%/tryloan'] = array(
    'page callback' => 'ebog_stream_try_loan',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['publizon/%/checkloan'] = array(
    'page callback' => 'ebog_stream_get_loan',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['publizon/%/checkauth'] = array(
    'page callback' => 'ebog_stream_check_auth',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['stream/%'] = array(
    'page callback' => 'ebog_stream_iframe_stream',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_theme.
 */
function ebog_stream_theme() {
  $hooks = array();

  $hooks['ebog_stream_iframe_stream'] = array(
    'arguments' => array('vars' => NULL),
    'template' => 'templates/ebog-stream-iframe-stream',
  );

  return $hooks;
}

/**
 * Add information about the order to current session.
 *
 * @param int $book_id
 *  The books ISBN number.
 * @param int $order_number
 *  The Publizon order number.
 * @param string $title
 *  The books title.
 */
function ebog_stream_set_session($book_id, $order_number, $internal_order_number, $title) {
  if (!isset($_SESSION['ebog_stream'])) {
    $_SESSION['ebog_stream'] = array();
  }
  $_SESSION['ebog_stream'][$book_id] = array(
    'session_url' => 'publizon/' . $order_number . '/checkauth',
    'order_number' => $order_number,
    'internal_order_number' => $internal_order_number,
    'title' => $title,
  );
}

/**
 * Get information about the a book from current session.
 *
 * @param int $book_id
 *  The books ISBN number.
 * @return mixed array
 *  Returns the session_url and order_number in an array or FALSE if it do not
 *  exists.
 */
function ebog_stream_get_session($book_id) {
  if (!isset($_SESSION['ebog_stream'])) {
    return FALSE;
  }
  if (isset($_SESSION['ebog_stream'][$book_id])) {
    return $_SESSION['ebog_stream'][$book_id];
  }
  return FALSE;
}

/**
 * Creates markup for the reader.
 */
function ebog_stream_iframe_stream($book_id) {
  $data = ebog_stream_get_session($book_id);
  if ($data === FALSE) {
    // As we cache links, the session may not be up-to-date. So we try to get it
    // updated.
    ebog_stream_get_loan($book_id, FALSE);
    $data = ebog_stream_get_session($book_id);
  }
  echo theme('ebog_stream_iframe_stream', $data);
}

/**
 * Loan a certain book.
 *
 * @param type $book_id
 *   Book isbn.
 */
function ebog_stream_try_loan($book_id) {
  global $user;
  $response = array();

  if (!empty($book_id)) {
    $user_loans = new PublizonUserLoans($user->uid);
    try {
      $user_loans->createLoan($book_id);
      if ($user_loans->isLoan($book_id)) {
        if (isset($user_loans->loans[$book_id])) {
          $order_number = $user_loans->loans[$book_id]->retailer_order_number;
          $internal_order_number = $user_loans->loans[$book_id]->internal_order_number;
          $title = $user_loans->loans[$book_id]->title;
          ebog_stream_set_session($book_id, $order_number, $internal_order_number, $title);
          $response = array(
            'status' => 'loaned',
            'book_id' => $book_id,
            'cvo' => $internal_order_number,
            'title' => $title,
            'author' => publizon_get_authors($user_loans->loans[$book_id]->product->getTingObject(), FALSE),
            'is_app' => ebog_offline_is_app(),
          );
        }
        else {
          $response = array(
            'status' => 'loan_error',
          );
        }
      }
    }
    catch (Exception $e) {
      $response = array(
        'status' => 'loan_exceeded',
        'title' => t('Max loans exceeded'),
        'message' => $e->getMessage(),
      );
    }
  }

  drupal_json($response);
  exit(0);
}

/**
 * Check for existing loan.
 *
 * @param type $book_id
 *  Book isbn.
 * @param bool $js
 *  If TRUE returns json array else return bool.
 *
 * @return mixed
 *  If json is not select to be return FALSE or an array with order number and
 *  internal order number.
 */
function ebog_stream_get_loan($book_id, $js = TRUE) {
  $response = array();
  if (!empty($book_id)) {
    try {
      $user_loans = new PublizonUserLoans();
    }
    catch (PublizonLoansException $e) {
      // This happens when the user is not a publizon user (e.g. editor or
      // admin).
      $user_loans = FALSE;
    }

    if ($user_loans && $user_loans->isLoan($book_id)) {
      if (isset($user_loans->loans[$book_id])) {
        $order_number = $user_loans->loans[$book_id]->retailer_order_number;
        $internal_order_number = $user_loans->loans[$book_id]->internal_order_number;
        $title = $user_loans->loans[$book_id]->title;
        ebog_stream_set_session($book_id, $order_number, $internal_order_number, $title);
        $response = array(
          'status' => 'loaned',
          'book_id' => $book_id,
        );
        if (!$js) {
          return array(
            'order_number' => $order_number,
            'internal_order_number' => $internal_order_number,
          );
        }
      }
      else {
        $response = array(
          'status' => 'loan_error',
        );
      }
    }
    else {
      $response = array(
        'status' => 'confirm_loan',
      );
    }
  }

  if ($js) {
    drupal_json($response);
    exit(0);
  }

  return FALSE;
}

/**
 * Initial stream checks.
 *
 * Look for user login or go to loan/stream.
 *
 * @param type $book_id
 *   Book isbn.
 */
function ebog_stream_stream($book_id) {
  $response = array();

  if (user_is_logged_in()) {
    ebog_stream_get_loan($book_id);
  }
  else {
    // Perform login.
    $form = drupal_get_form('elib_popup_login_form');
    $response = array(
      'status' => 'login',
      'title' => t('Login'),
      'content' => $form,
    );
  }

  drupal_json($response);
  exit(0);
}

/**
 * Reader script authentication handler.
 *
 * @param $order_number
 *   Order ID, returned by Publizon WS.
 */
function ebog_stream_check_auth($order_number) {
  $userinfo = publizon_user_get_credentials();

  $retailer_id = $userinfo['retailer_id'];
  $library = publizon_get_library($retailer_id);
  $library_key = md5($library['retailer_key_code']);

  $response = file_get_contents('http://streaming.bogskyen.dk/publicstreaming/v1/' . $order_number . '/session/' . EREOLEN_KEY . '/' . $retailer_id . '/' . $library_key);

  echo $response;
}

/**
 * Implementation of hook_preprocess_page.
 *
 * Inject the streaming script on certain pages.
 */
function ebog_stream_preprocess_page(&$variables) {
  if ((arg(0) === 'ting' && arg(1) === 'object') || (arg(0) === 'ting' && arg(1) === 'search') || (arg(0) === 'min_side')) {
    drupal_add_js(drupal_get_path('module', 'ebog_stream') . '/js/ebog_stream.scripts.js');
  }
}

/**
 * Implements hook_preprocess_publizon_actions().
 *
 * Adds extra action link to stream functions on loan lists.
 */
function ebog_stream_preprocess_publizon_actions(&$vars) {
  if (in_array($vars['type'], array('loan', 'cart'))) {
    // Try to make the right link based on book loan status.
    $isbn = $vars['product']->isbn;
    $link = l(t('Borrow'), 'publizon/' . $isbn . '/stream', array('html' => TRUE, 'attributes' => array('class' => 'loan ebook-stream', 'target' => '_blank', 'action' => 'stream')));
    if ($order_numbers = ebog_stream_get_loan($isbn, FALSE)) {
      // Book was not available so fallback to normal loan link.
      $link = l(t('Read'), 'stream/' . $isbn, array('query' => array('cvo' => $order_numbers['internal_order_number']), 'html' => TRUE, 'attributes' => array('class' => 'reader-init .cvo', 'target' => '_blank')));
    }

    $vars['actions'][] =  array(
      '#link' => $link,
      '#class' => 'download',
      '#weight' => 1,
    );

    // Re-sort the actions based on weight.
    usort($vars['actions'], 'element_sort');
  }
}
